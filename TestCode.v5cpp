{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor FrontLeftMotor = motor(PORT1, ratio18_1, false);\n\nmotor BackLeftMotor = motor(PORT2, ratio18_1, false);\n\nmotor FrontRightMotor = motor(PORT3, ratio18_1, false);\n\nmotor BackRightMotor = motor(PORT4, ratio18_1, false);\n\nmotor ArmMotor = motor(PORT5, ratio18_1, false);\n\nmotor ClawMotor = motor(PORT6, ratio18_1, false);\n\nmotor LeftCatapultMotor = motor(PORT7, ratio18_1, false);\n\nmotor RightCatapultMotor = motor(PORT8, ratio18_1, false);\n\ninertial InertialSensor = inertial(PORT9);\n\n/*vex-vision-config:begin*/\nvision RaceDectector = vision (PORT10, 50);\n/*vex-vision-config:end*/\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nbool sign = true;\nint x = 0;\n/*void pidTurn(double amount) \n{ \n  double goal = InertialSensor.rotation(degrees) + amount; \n  double error = amount; \n  double prevError = error; \n  double errorChange = 0;//no change in error yet so no d term yet \n  double pastErrors = 0; \n  const int TRACK_WIDTH = 300; \n  const int CIRCUMFERENCE = 320; \n  const double MAX_ERROR = 0.1;//for a successful turn \n  const double MAX_RATE = 0.25;//reduce overshoot \n  const double MIN_RESPONSE = 0.75; \n  double p = 0.5; \n  double i = 0.0001; \n  double d = -0.05; \n  double turnPower = p*error + i*pastErrors + d*errorChange; \n  while(fabs(currError) > MAX_ERROR || fabs(InertialSensor.gyroRate(zaxis,dps)) > MAX_RATE) \n  { \n    prevError = currError;//save the previous error so we know how far we actually turned \n    currError = InertialSensor.rotation(degrees) - goal; \n    errorChange = currError - prevError; \n    double expectedChange = turnPower/100*200.0/60.0*RESPONSE_TIME*CIRCUMFERENCE/(M_PI*TRACK_WIDTH)*360; \n    pastErrors += expectedChange - errorChange; \n    turnPower = p*currError + i*pastErrors + d*errorChange; \n    if(fabs(turnPower) < MIN_RESPONSE) \n    { \n      if(turnPower > 0) \n        turnPower = MIN_RESPONSE; \n      else \n        turnPower = -MIN_RESPONSE; \n    } \n    //LeftMotor.setVelocity(-turnPower,percent); \n    //RightMotor.setVelocity(turnPower, percent); \n  FrontLeftMotor.setVelocity(turnPower,percent);\n  FrontRightMotor.setVelocity(turnPower,percent);\n  BackLeftMotor.setVelocity(turnPower,percent);\n  BackRightMotor.setVelocity(turnPower,percent);\n  FrontLeftMotor.spin(forward);\n  FrontRightMotor.spin(forward);\n  BackLeftMotor.spin(forward);\n  BackRightMotor.spin(forward);\n    wait(RESPONSE_TIME, seconds); \n  } \n    FrontLeftMotor.stop(); \n    BackLeftMotor.stop();\n    FrontRightMotor.stop(); \n    BackRightMotor.stop(); \n} \n*/\n\nvoid driveStraight(int x)\n{\n  FrontLeftMotor.setVelocity(x,percent);\n  FrontRightMotor.setVelocity(x,percent);\n  BackLeftMotor.setVelocity(x,percent);\n  BackRightMotor.setVelocity(x,percent);\n  FrontLeftMotor.spin(forward);\n  FrontRightMotor.spin(forward);\n  BackLeftMotor.spin(forward);\n  BackRightMotor.spin(forward);\n}\nvoid setStop(){\n  ClawMotor.setStopping(hold);\n  ArmMotor.setStopping(hold);\n  LeftCatapultMotor.setStopping(hold);\n  RightCatapultMotor.setStopping(hold);\n}\n\nvoid launch()\n{\n  ArmMotor.spinFor(forward,x,turns);\n  ClawMotor.spinFor(forward,x,turns);\n  ArmMotor.spinFor(reverse,x,turns);\n  wait(0.5,seconds);\n  LeftCatapultMotor.spinFor(forward,x,turns);\n  RightCatapultMotor.spinFor(forward,x,turns);\n}\n\nvoid startUp()\n{\n  InertialSensor.calibrate();\n  ArmMotor.spinFor(reverse,x,turns);\n}\n\ndouble scaleFactor(double p1, double p2) \n{ \n  double absP1 = fabs(p1); \n  double absP2 = fabs(p2); \n  if(absP1 >= absP2 && absP1 > 100) \n    return 100/p1; \n  else if(absP2 >= absP1 && absP2 > 100) \n    return 100/p2; \n  else //no change \n    return 1; \n} \nvoid arcadeControl() \n{ \n  const int MIN_PRESSURE = 2;//can change this with testing \n  int a3 = Controller1.Axis3.position(); \n  int a1 = Controller1.Axis1.position(); \n  double leftPower = a3 + a1; \n  double rightPower = a3 - a1; \n  double scale = scaleFactor(leftPower, rightPower); \n  leftPower = scale*leftPower; \n  rightPower = scale*rightPower; \n  if(abs(leftPower) > MIN_PRESSURE) \n  { \n    FrontLeftMotor.setVelocity(leftPower, percent); \n    FrontLeftMotor.spin(forward);   \n    BackLeftMotor.setVelocity(leftPower, percent); \n    BackLeftMotor.spin(forward);   \n  } \n  else \n  { \n    FrontLeftMotor.stop(); \n    BackLeftMotor.stop();\n  } \n  if(abs(rightPower) > MIN_PRESSURE) \n  { \n    FrontRightMotor.setVelocity(rightPower, percent); \n    FrontRightMotor.spin(forward); \n    BackRightMotor.setVelocity(rightPower, percent); \n    BackRightMotor.spin(forward); \n  } \n  else \n  { \n    FrontRightMotor.stop(); \n    BackRightMotor.stop(); \n  } \n} \n//void vison(){}\n/*void visonMode()\n{\n sign = !sign;\n if(sign = true)\n {\n   vison();\n }\n} */\n\nint main()\n{\n  setStop();\n  startUp();\n  wait(1,seconds);\n  while(true)\n  {\n    arcadeControl(); \n    //Controller1.ButtonLeft.pressed(pidTurn(90));\n   // Controller1.ButtonRight.pressed(pidTurn(-90));\n    if(Controller1.ButtonUp.pressing())\n    {\n      driveStraight(50);\n    }\n    if(Controller1.ButtonDown.pressing())\n    {\n      driveStraight(-50);\n    }\n    if(Controller1.ButtonR1.pressing())\n    {\n      ClawMotor.spin(forward);\n    }\n    if(Controller1.ButtonR2.pressing())\n    {\n      ClawMotor.spin(reverse);\n    }\n    if(Controller1.ButtonX.pressing())\n    {\n      LeftCatapultMotor.spin(forward);\n      RightCatapultMotor.spin(forward);\n    }\n      if(Controller1.ButtonR1.pressing())\n    {\n      ArmMotor.spin(forward);\n    }\n          if(Controller1.ButtonR2.pressing())\n    {\n      ArmMotor.spin(forward);\n    }\n    //Controller1.ButtonA.pressing(launch);\n    //Controller1.ButtonB.pressed(visonMode());\n\n\n\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"FrontLeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"BackLeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[3],"name":"FrontRightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[4],"name":"BackRightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[5],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[6],"name":"ClawMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"LeftCatapultMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[8],"name":"RightCatapultMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[9],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[10],"name":"RaceDectector","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"SIG_1\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_1\"},\"range\":2.5},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.6","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}