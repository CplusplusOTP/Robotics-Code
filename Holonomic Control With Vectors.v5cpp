{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\ninertial InertialSensor = inertial(PORT18);\n\nmotor FrontLeftMotor = motor(PORT13, ratio18_1, false);\n\nmotor FrontRightMotor = motor(PORT14, ratio18_1, false);\n\nmotor BackRightMotor = motor(PORT12, ratio18_1, false);\n\nmotor BackLeftMotor = motor(PORT19, ratio18_1, false);\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Angles of the wheels on the robot converted into radians \ndouble A1 = 135*M_PI/180;\ndouble A2 = 225*M_PI/180;\ndouble A3 = 315*M_PI/180;\ndouble A4 = 45*M_PI/180;\n\n\n\ndouble getPowerScale(double p1, double p2, double p3, double p4) \n{ \n\n    double absP1 = fabs(p1); \n\n    double absP2 = fabs(p2); \n\n    double absP3 = fabs(p3); \n\n    double absP4 = fabs(p4); \n\n    double maxPower = 100.0; \n\n \n\n    if(absP1 > maxPower && absP1 >= absP2 && absP1 >= absP3 && absP1 >= absP4) \n\n        return maxPower/absP1; \n\n    else if(absP2 > maxPower && absP2 >= absP1 && absP2 >= absP3 && absP2 >= absP4) \n\n        return maxPower/absP2; \n\n    else if(absP3 > maxPower && absP3 >= absP1 && absP3 >= absP2 && absP3 >= absP4) \n\n        return maxPower/absP3; \n\n    else if(absP4 > maxPower && absP4 >= absP1 && absP4 >= absP2 && absP4 >= absP3) \n\n        return maxPower/absP4; \n\n    else \n\n        return 1;//no change \n\n} \n\n \n\nvoid movementControl() \n\n{ \n\n    int x = Controller1.Axis4.position(); \n\n    int y = Controller1.Axis3.position(); \n\n    int rot = Controller1.Axis1.position(); \n\n \n\n    double M = sqrt(x*x + y*y); \n\n    double a = atan2(x, y);//angle made by the user \n\n    double r = InertialSensor.rotation(degrees)*M_PI/180;//convert to radians \n\n    double newX = M * sin(a - r); \n\n    double newY = M * cos(a - r); \n\n     \n\n    double frPower = newX*cos(A1) + newY*sin(A1) + rot; \n\n      double flPower = newX*cos(A2) + newY*sin(A2) + rot; \n\n      double blPower = newX*cos(A3) + newY*sin(A3) + rot; \n\n       double brPower = newX*cos(A4) + newY*sin(A4) + rot; \n\n \n\n    double scaleCorrection = getPowerScale(flPower, frPower, blPower, brPower); \n\n    frPower *= scaleCorrection; \n\n    flPower *= scaleCorrection; \n\n    blPower *= scaleCorrection; \n\n    brPower *= scaleCorrection; \n\n    \n\n    FrontRightMotor.setVelocity(frPower, percent); \n\n    FrontLeftMotor.setVelocity(flPower, percent); \n\n    BackLeftMotor.setVelocity(blPower, percent); \n\n    BackRightMotor.setVelocity(brPower, percent); \n\n     \n\n    FrontRightMotor.spin(forward); \n\n    FrontLeftMotor.spin(forward); \n\n    BackLeftMotor.spin(forward); \n\n    BackRightMotor.spin(forward); \n\n} \n\n \n\nint main() \n\n{   \n\n    InertialSensor.calibrate(); \n\n    while(InertialSensor.isCalibrating()) \n\n       wait(0.01,seconds); \n\n     \n\n     \n\n    while(true) \n\n    {         \n\n        movementControl(); \n\n    }  \n\n} \n","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[18],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[13],"name":"FrontLeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[14],"name":"FrontRightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[12],"name":"BackRightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[19],"name":"BackLeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}