{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor frontleft = motor(PORT1, ratio18_1, true);\n\nmotor backleft = motor(PORT3, ratio18_1, false);\n\nmotor frontright = motor(PORT2, ratio18_1, false);\n\nmotor backright = motor(PORT4, ratio18_1, true);\n\ncontroller Controller1 = controller(primary);\nmotor puncher = motor(PORT11, ratio18_1, true);\n\nmotor lowerfrontleft = motor(PORT5, ratio18_1, false);\n\nmotor lowerfrontright = motor(PORT6, ratio18_1, true);\n\nmotor lowermiddleleft = motor(PORT7, ratio18_1, true);\n\nmotor lowermiddleright = motor(PORT8, ratio18_1, false);\n\nmotor lowerbackleft = motor(PORT9, ratio18_1, false);\n\nmotor lowerbackright = motor(PORT10, ratio18_1, true);\n\ninertial InertialSensor = inertial(PORT12);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nconst double gacceleration = -9.81;\nconst double gmagnitude = 9.81;\n/*const double initialvelocity = // The user of the code may input their robot's specific initial velociy //\n\ndouble wheeldiameterincentimetres = 3.25 * 2.54;\ndouble wheelcircumference = wheeldiameterincentimetres * 3.14;\ndouble flywheelrpm = initialvelocity *1/100 * (1/wheelcircumference) * 60\n*/\n\n// power = flywheelrpm/200 *100 //\ndouble cycles;\ndouble speed = 10.0;\n\nvoid puncherfoward() \n{\n  puncher.setVelocity(30, percent);\n  puncher.spin(forward);\n}\nvoid puncherreverse() \n{\n  puncher.setVelocity(30, percent);\n  puncher.spin(reverse);\n}\nvoid puncherstop() \n{\n  puncher.stop();\n}\n\n/*void projectilesetupinfo(double initialheight, double range) \n{\n  double verticaldisplacement = (-1 * initialheight);\n  \n  double thetaradians = 0.5 * asin((Range * gmagnitude/pow(initialvelocity, 2) * (3.14/180) ));\n  double thetadegrees = thetaradians * 180/3.14;\n  double sinethetadegrees = (sin(thetaradians)) * 180/3.14;\n  double initialvelocityY = initialvelocity * sinethetadegrees;\n  double totaltime = (-1 * initialvelocityY - sqrt(pow(initialvelocityY, 2) - 4(gacceleration * verticaldisplacement))/(2 * gacceleration); // quadratic equation to solve for totaltime //\n\n  while(true) \n  {\n    Brain.Screen.print(round(thetadegrees); // Unfortunately, our robot cannot adjust its height by code and so the incline and angle will have to be set manually.To do that, we need this information. //\n    Brain.Screen.print(totaltime); \n    \n    if (thetadegrees) >= 90 \n    {\n      Brain.Screen.print(\"Angle is too high! \");\n    }\n\n    else if (thetadegrees) < 15 \n    {\n      Brain.Screen.print(\"Angle is too low! \");\n    } \n  }\n}\n*/\nvoid activateflywheel()\n{ \n    frontleft.spin(forward);\n    frontright.spin(forward);\n    backleft.spin(forward);\n    backright.spin(forward);\n    lowerfrontleft.spin(forward);;\n    lowerfrontright.spin(forward);\n    lowermiddleright.spin(forward);\n    lowermiddleleft.spin(forward);\n    lowerbackleft.spin(forward);\n    lowerbackright.spin(forward);\n}\n\n void activate2(double x)\n {\n    frontleft.setVelocity(x,percent);\n    frontright.setVelocity(x, percent);\n    backleft.setVelocity(x, percent);\n    backright.setVelocity(x, percent);\n    lowerfrontleft.setVelocity(x,percent);\n    lowerfrontright.setVelocity(x,percent);\n    lowermiddleright.setVelocity(x,percent);\n    lowermiddleleft.setVelocity(x,percent);\n    lowerbackleft.setVelocity(x,percent);\n    lowerbackright.setVelocity(x,percent);\n\n    frontleft.spin(forward);\n    frontright.spin(forward);\n    backleft.spin(forward);\n    backright.spin(forward);\n    lowerfrontleft.spin(forward);;\n    lowerfrontright.spin(forward);\n    lowermiddleright.spin(forward);\n    lowermiddleleft.spin(forward);\n    lowerbackleft.spin(forward);\n    lowerbackright.spin(forward);\n }\n\nvoid accelerate()\n{\n  cycles = speed/5;\n  double currSpeed = 0;\n /* if(speed < 0)\n  {\n  for(int count = 0; count > cycles; count--) \n    { \n        activate2(currSpeed);\n        wait(0.25,seconds);\n        currSpeed -= 5.0; \n    } \n  }\n  else */\n  {\n  for(int count = 0; count < cycles; count++) \n    { \n        activate2(currSpeed);\n        wait(0.25,seconds);\n        currSpeed += 5.0; \n    } \n  }\n}\n\nvoid motortempcontrol()\n{\n  \n   int m1 = frontleft.temperature(percent);\n   int m2 = frontright.temperature(percent);\n   int m3 = backleft.temperature(percent);\n   int m4 = backright.temperature(percent);\n   int m5 = lowerfrontleft.temperature(percent);\n   int m6 = lowerfrontright.temperature(percent);\n   int m7 = lowermiddleleft.temperature(percent);\n   int m8 = lowermiddleright.temperature(percent);\n   int m9 = lowerbackleft.temperature(percent);\n   int m10 = lowerbackright.temperature(percent);\n   int heat[] = { m1,m2,m3,m4,m5,m6,m7,m8,m9,m10};\n  //Brain.Screen.clearScreen();\n  for( int i = 1; i < 11; i++)\n  {\n   Brain.Screen.setCursor(i,1);\n   Brain.Screen.print( \"Motor\",i , heat[i-1] , \"%\");\n  }\n}\n\nvoid percentvelocity()\n{\n  \n   int m1 = frontleft.velocity(percent);\n   int m2 = frontright.velocity(percent);\n   int m3 = backleft.velocity(percent);\n   int m4 = backright.velocity(percent);\n   int m5 = lowerfrontleft.velocity(percent);\n   int m6 = lowerfrontright.velocity(percent);\n   int m7 = lowermiddleleft.velocity(percent);\n   int m8 = lowermiddleright.velocity(percent);;\n   int m9 = lowerbackleft.velocity(percent);\n   int m10 = lowerbackright.velocity(percent);\n   int fast[] = { m1,m2,m3,m4,m5,m6,m7,m8,m9,m10};\n  //Brain.Screen.clearScreen();\n  for( int i = 1; i < 11; i++)\n  {\n   Brain.Screen.setCursor(i,15);\n   Brain.Screen.print( \"MotorSpeed\",i , fast[i-1] , \"%\");\n  }\n}\n\n/*void wheelmotorvelocitymain()\n{\n  Brain.Screen.clearScreen();\n  wait(2, seconds);\n\n  activateflywheel();\n  motortempcontrol(); \n  percentvelocity();\n}\n*/\n\nvoid flywheelstop()\n{\n  frontleft.stop();\n  frontright.stop();\n  backleft.stop();\n  backright.stop();\n  lowerfrontleft.stop();\n  lowerfrontright.stop();\n  lowermiddleright.stop();\n  lowermiddleleft.stop();\n  lowerbackleft.stop();;\n  lowerbackright.stop();\n}\n\nvoid getAngle( double x, double h)\n{\n  double vi = 0;\n  const double g = -9.81;\n  double tanVal = x/h;\n  double sq = (h*h) + (x*x);\n  double denominator = sqrt(sq);\n  double tanAng = atan(tanVal);\n  double ft = (g*(x*x)) / (vi*vi);\n  ft = ft -h;\n  double cosVal = ft/denominator ;\n  double cosAng = acos(cosVal);\n  double ang = (cosAng+tanAng)/2;\n  Controller1.Screen.clearScreen();\n  Controller1.Screen.setCursor(1,1);\n  Controller1.Screen.print(\"Angle \",ang); \n}\n\nvoid RoboAng()\n{\n  //Controller1.Screen.clearScreen();\n  Controller1.Screen.setCursor(2,1);\n  Controller1.Screen.print( InertialSensor.pitch(degrees));\n}\n\nvoid getStats()\n{\n  Brain.Screen.clearScreen();\n  Controller1.Screen.clearScreen();\n  percentvelocity();\n  motortempcontrol();\n  RoboAng();\n  wait(0.5,seconds);\n\n}\nint main()\n{\n    puncher.setStopping(hold);\n    frontleft.setVelocity(speed,percent);\n    frontright.setVelocity(speed, percent);\n    backleft.setVelocity(speed, percent);\n    backright.setVelocity(speed, percent);\n    lowerfrontleft.setVelocity(speed,percent);\n    lowerfrontright.setVelocity(speed,percent);\n    lowermiddleright.setVelocity(speed,percent);\n    lowermiddleleft.setVelocity(speed,percent);\n    lowerbackleft.setVelocity(speed,percent);\n    lowerbackright.setVelocity(speed,percent);\n    //getAngle( 1, 1);\n\n  while(true)\n  {\n    Controller1.ButtonY.pressed(puncherfoward);\n    Controller1.ButtonY.released(puncherstop);\n    Controller1.ButtonX.pressed(puncherreverse);\n    Controller1.ButtonX.released(puncherstop);\n    Controller1.ButtonA.released(accelerate);\n    Controller1.ButtonB.pressed(flywheelstop);\n    getStats();\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"frontleft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"backleft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"frontright","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"backright","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[11],"name":"puncher","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[5],"name":"lowerfrontleft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"lowerfrontright","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[7],"name":"lowermiddleleft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"lowermiddleright","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[9],"name":"lowerbackleft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"lowerbackright","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[12],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}