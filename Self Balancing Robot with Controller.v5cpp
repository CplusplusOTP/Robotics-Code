{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor LeftMotor = motor(PORT11, ratio18_1, false);\n\nmotor RightMotor = motor(PORT20, ratio18_1, true);\n\ninertial Balance = inertial(PORT16);\n\nsonar RangeFinderA = sonar(Brain.ThreeWirePort.A);\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nconst double MAX_TILT = 30;//robot has failed, program aborts over this threshold\n\n//PID parameters/variables to test - mine are on carpet (to reduce the concern of slippage)\ndouble targetAngle = 7.6;//equilibrium angle\ndouble kP = 0.0;//how fast we react to the observed error - in this case the tilt\ndouble kI = 0.0;//our reaction will have some residual error still in the system, this term reacts to the \"build up\" that is happening\ndouble kD = 0.0;//if we measure our reaction, in terms of how well it performed from the last observed error, this variable will adjust our reaction accordingly\ndouble waitTime = 0.004;//4ms\n\ndouble prevPosition = 0;\ndouble travel = 0;\n\nstruct State{\n  double angle;\n  double rate;\n  double distance;\n};\n\nState goal = {targetAngle,0,0};\n\nconst double SPEED_MAX = 2;\nconst double STEERING_MAX = 30;\nconst double AXIS_MAX = 100;//controller axis returns between -100 and 100\n\n//want to return the rpm now so we can \"tweak\" the values to turn\ndouble getPIDRPM()\n{\n    double error = goal.angle - Balance.roll();\n    if(fabs(error) > MAX_TILT)//fallen over?\n      return 0;\n\n    else\n    {\n        double integral = goal.distance - travel;\n        double derivative = goal.rate - Balance.gyroRate(zaxis, dps);        \n        \n        //assumes motors move the robot forward\n        //assumes a positive angle is when the robot tips forward\n        //when error is positive the motors should also be negative to correct error - subtract\n        //when integral is positive, the robot's current location has not reached the goal, robot should move forward - add\n        //when the derivative is positive the robot is falling backward (since we subtract it from the goal), the correction should be negative - subtract\n        double response = -kP * error + kI * integral - kD * derivative;\n        double currentRPM = (LeftMotor.velocity(rpm) + RightMotor.velocity(rpm))/2;\n        return currentRPM + response;\n    }\n}\n\nvoid countDown(int sec)\n{\n    for(int count = sec; count > 0; count--)\n    {\n        Brain.Screen.clearScreen();\n        Brain.Screen.setCursor(1,1);\n        Brain.Screen.print(\"Program starting in %d...           \", count);\n        wait(1,seconds);\n    }\n    Brain.Screen.clearScreen();\n}\n\nvoid calibrate()\n{\n    wait(1, seconds);//pressing screen to run can wobble sensor\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(\"Calibrating Inertial Sensor...          \");\n\n    Balance.startCalibration();\n    while(Balance.isCalibrating())\n    {\n        wait(0.01, seconds);\n    }\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(\"Calibration complete           \");\n\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.print(\"Touch Y Button to begin...            \");\n    while(!Controller1.ButtonY.pressing())\n    {\n        wait(0.01, seconds);\n    }\n\n    countDown(3);\n}\n\nvoid driverControlTilt()\n{\n  //this is the VERY basic joystick control code\n  //in this case we drive forward or backward based on tilting the robot\n  int leftJoystick = Controller1.Axis3.position();\n  int rightJoystick = Controller1.Axis2.position();\n  goal.angle = targetAngle + (rightJoystick + leftJoystick)/2.0 * SPEED_MAX/AXIS_MAX;\n  double steering = (rightJoystick - leftJoystick)/2.0 * STEERING_MAX/AXIS_MAX;\n\n  double balanceRPM = getPIDRPM();        \n  \n  LeftMotor.setVelocity(balanceRPM - steering, rpm);\n  RightMotor.setVelocity(balanceRPM + steering, rpm);\n\n  LeftMotor.spin(forward);\n  RightMotor.spin(forward);  \n  wait(waitTime, seconds);//allow motors to react        \n}\n\nvoid driverControlMove()\n{\n  //this is the VERY basic joystick control code\n  //in this case we drive forward or backward by moving the equilibrium point\n  //of the robot in front or behind its latest point\n  //when it tries to correct the position it will drive in the requested direction\n  //this can be more stable because it doesn't directly effect the tilt  \n  int leftJoystick = Controller1.Axis3.position();\n  int rightJoystick = Controller1.Axis2.position();\n  goal.distance += (rightJoystick + leftJoystick)/2.0 * SPEED_MAX/AXIS_MAX;\n\n  double steering = (rightJoystick - leftJoystick)/2.0 * STEERING_MAX/AXIS_MAX;\n\n  double balanceRPM = getPIDRPM();        \n  \n  LeftMotor.setVelocity(balanceRPM - steering, rpm);\n  RightMotor.setVelocity(balanceRPM + steering, rpm);\n\n  LeftMotor.spin(forward);\n  RightMotor.spin(forward);  \n  wait(waitTime, seconds);//allow motors to react        \n}\n\nvoid seekAndDestroy()\n{\n  goal.angle = targetAngle;\n  double steering = 0;\n  \n  double ultraSonic = RangeFinderA.distance(mm);\n  if(ultraSonic < 500)//someone is within 500mm, tilt towards them\n  {\n      //choose one approach\n      goal.angle += 1;//tilt forward 1 degree\n      //goal.distance += 0.01;//move forward 1 cm\n  }\n\n  else //if we don't see anyone close by then turn to try to find one\n  {\n      steering = 5;\n  }\n\n  double balanceRPM = getPIDRPM();\n  LeftMotor.setVelocity(balanceRPM - steering, rpm);\n  RightMotor.setVelocity(balanceRPM + steering, rpm);\n  LeftMotor.spin(forward);\n  RightMotor.spin(forward);\n}\n\nvoid displayMode(bool active, const char* name)\n{\n  Controller1.Screen.clearScreen();\n  Controller1.Screen.setCursor(1,1);\n  if(active)\n    Controller1.Screen.print(\"Active\");\n  else\n    Controller1.Screen.print(\"Inactive\");\n\n  Controller1.Screen.setCursor(2,1);\n  Controller1.Screen.print(\"%s\", name);\n}\n\nint main() \n{\n  calibrate();\n  \n  const int JOYSTICK_TILT = 0, JOYSTICK_MOVE = 1, ATTACK = 2, MODES = 3;\n  const char* names[] = {\"Tilt\", \"Move\", \"Attack\"};\n  int mode = 0;\n  bool active = false;\n  displayMode( active, names[mode] );\n  \n  while(true)\n  {\n    if(Controller1.ButtonX.pressing())//toggle active mode\n    {\n        while(Controller1.ButtonX.pressing())//release button\n          wait(0.01, seconds);\n      \n        active = !active;\n        countDown(3);\n    }   \n\n    if(!active)\n    {\n      if(Controller1.ButtonUp.pressing())\n      {\n        while(Controller1.ButtonUp.pressing())//release button\n          wait(0.01, seconds);\n\n        mode++;\n        if(mode >= MODES)\n          mode = MODES - 1;\n\n        displayMode(active, names[mode]);\n      }\n\n      if(Controller1.ButtonDown.pressing())\n      {\n        while(Controller1.ButtonDown.pressing())//release button\n          wait(0.01, seconds);\n        \n        mode--;\n        if(mode < 0)\n          mode = 0;\n\n        displayMode(active, names[mode]);\n      }\n    }\n\n    else\n    {\n      if(mode == JOYSTICK_TILT)\n        driverControlTilt();\n      else if(mode == JOYSTICK_MOVE)\n        driverControlMove();\n      else//ATTACK\n        seekAndDestroy();\n    }\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[11],"name":"LeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"RightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[16],"name":"Balance","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1,2],"name":"RangeFinderA","customName":false,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}